/*######################################################
#                                                      #
#  Data structs for colors and coordinates, as well as #
#  bitmaps for the fill patterns, where 1024 bits, or  #
#  128 bytes represents a mask                         #
#                                                      #
########################################################*/

#pragma once
#include <gl/glut.h>
#include <imgui.h>
#include <stack>
#include <vector>

typedef struct {
    GLfloat r;
    GLfloat g;
    GLfloat b;
} Color;
typedef struct {
    int x;
    int y;
} Coords;

extern float borderColor[];

// color states
static ImVec4 clear_color = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
static ImVec4 border_color = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);
static ImVec4 fill_color = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
static ImVec4 default_fill_grad = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);

// fill pattern states
static int currFillPattern = 0;

// store line width
static float lWidth = 1.0;

// store border pattern
GLushort bPattern = 0xffff;

// Global GLUT polygon variables
static Coords polygons[20][100];
static int no_vertices[20];
static int coordsP = 0;
static int polygonsP = 0;
static int previousMouseLoc[2] = { 0, 0 };
static int recentMouseButton = 0;
static float borderColor[] = { 0.0, 0.0, 0.0, 1.0 };
static std::stack<ImVec4> fill_grad_colors, bord_grad_colors;
static std::vector<std::vector<ImVec4>> fillColorsHistory, borderColorsHistory;

// Checkbox statuses
static bool isSolid = false, isFly = false, isHatch = false, isHalf = false, fillGrad = false, borderGrad = false;


GLubyte fly[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
    0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
    0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
    0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
    0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
    0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 };
GLubyte HorHatch[] = {
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff,
0xff, 0x00, 0xff, 0x00,
0x00, 0xff, 0x00, 0xff
};
GLubyte halftone[] = {
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55 };
